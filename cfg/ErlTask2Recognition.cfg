#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author:

PACKAGE='task2_client'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)
gen.add("kitchen_name",              str_t, 0,                                "Name of the kitchen POI",                 "kitchen_table1_view1")
gen.add("bedroom_name",              str_t, 0,                                "Name of the bedroom POI",                 "bed1_view1")
gen.add("outside_bedroom_name",      str_t, 0,                                "Name of the outside bedroom POI",         "bedroom_door1_view1")
gen.add("halltable_name",            str_t, 0,                                "Name of the halltable POI",               "entrance_door1_view1")
gen.add("entrance_name",             str_t, 0,                                "Name of the entrance POI",                "home")
gen.add("farewell_name",             str_t, 0,                                "Name of the farewell POI",                "home")
gen.add("idle_name",                 str_t, 0,                                "Name of the idle POI",                    "home")
gen.add("visitors_num",              int_t, 0,                                "Number of visitors to wait for",          4,1,4 )
gen.add("start_task",                bool_t, 0,                               "Option that starts the task",             False)
gen.add("ring_bell",                 bool_t, 0,                               "The bell has rung",                       False)
gen.add("person",                    str_t, 0,                                "Name of the person at the door",          "Deliman")
gen.add("start_actions_for_person",  bool_t,0,                                "Start the action algorithm for the person", False)
gen.add("waiting_time",              int_t, 0,                                "Total seconds that tiago should wait in the room", 3,0,60)
gen.add("waiting_time_doctor",       int_t, 0,                                "Total seconds that tiago should wait in the bedroom", 45,0,60)
gen.add("tilt_angle",                double_t, 0,                             "Angle of the tilt joint", -0.35,-3.14159,3.14159)

gen.add("max_retries",               int_t, 0,                                "Total retries before accepting the visitor",3,1,10)
gen.add("person_unknown",            str_t, 0,                                "Name of the Unknown label",      "Unknown")
gen.add("person_kimble",             str_t, 0,                                "Name of the Kimble label",      "Kimble")
gen.add("person_deliman",            str_t, 0,                                "Name of the Deliman label",      "Deliman")
gen.add("person_postman",            str_t, 0,                                "Name of the Postman label",      "Postman")
gen.add("max_action_retries",        int_t, 0,                                "Total retries for each action",3,1,10)

exit(gen.generate(PACKAGE, "ErlTask2Algorithm", "ErlTask2"))
